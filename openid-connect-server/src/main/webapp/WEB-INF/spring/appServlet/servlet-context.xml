<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	
		<!-- Resolve views based on string names -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver" >
		<beans:property name="order" value="1"/>
	</beans:bean>

	<!-- JSON views for each type of model object -->
	<beans:bean id="jsonOpenIdConfigurationView" class="org.mitre.swd.view.JsonOpenIdConfigurationView" />
	<beans:bean id="jsonSwdResponseView" class="org.mitre.swd.view.SwdResponse" />
	<beans:bean id="jwkKeyList" class="org.mitre.openid.connect.view.JwkKeyListView" />
	
 	<beans:bean id="jsonUserInfoView" class="org.mitre.openid.connect.view.JSONUserInfoView"/>
 	<beans:bean id="jsonIdTokenView" class="org.mitre.openid.connect.view.JSONIdTokenView"/> 
	
	<beans:import resource="controllers.xml" />

	<!-- SECOAUTH Authorization Server, with our custom token granter plugged in -->
	
	<!-- Instantiate SECOAUTH token granter; plug in our custom token services -->
	<beans:bean id="authCodeTokenGranter" class="org.springframework.security.oauth2.provider.code.AuthorizationCodeTokenGranter">
		<beans:constructor-arg>
			<beans:ref bean="openIdConnectTokenService"/>
		</beans:constructor-arg>
		<beans:constructor-arg>
			<beans:ref bean="authCodeServices"/>
		</beans:constructor-arg>
		<beans:constructor-arg>
			<beans:bean class="org.mitre.oauth2.service.impl.DefaultOAuth2ClientDetailsEntityService"/>
		</beans:constructor-arg>
	</beans:bean>
	
	<oauth:authorization-server client-details-service-ref="defaultOAuth2ClientDetailsEntityService" 
		token-services-ref="openIdConnectTokenService" token-granter-ref="authCodeTokenGranter"
		authorization-endpoint-url="/openidconnect/auth" token-endpoint-url="/openidconnect/token">
		<oauth:authorization-code authorization-code-services-ref="authCodeServices"/>
	</oauth:authorization-server>
	

</beans:beans>
